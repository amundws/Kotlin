package academy.learnprogramming.callkotlinfromjava;

//import academy.learnprogramming.kotlincode.CarKt;
import academy.learnprogramming.kotlincode.Car;
import academy.learnprogramming.kotlincode.SingletonObj;
import academy.learnprogramming.kotlincode.StaticCar;

import java.io.IOException;

public class Main {

    public static void main(String[] args) {
	    //CarKt.topLevel();
        StaticCar.topLevel();

        StaticCar.print("print this Java string");

        Car car = new Car("blue", "BMW", 2011, true);
        //System.out.println(car.getModelName());
        //car.setColor("purple"); //Property is val
        System.out.println(car.getColor());
        //car.setModel("asd"); //Set method is private
        System.out.println(car.isAutomatic());
        System.out.println(car.modelName); //@JvmField enables use of property name instead of method

        Car.Companion.carComp(); //Accessing the instance method generated by the compiler
        //In Kotlin we don't need the Companion keyword. In Java we have to use the @JvmStatic annotation to do that.
        Car.carComp();

        //When comiling an object class the Kotlin compiler generates a static class and adds a field called INSTANCE to it.
        //This field is assigned the single instance of the class.
        //YOu never need to access this field when using an object class from Kotlin, but you can access it when calling Kotlin from Java.
        SingletonObj.INSTANCE.doSomething();
        SingletonObj.doSomething(); //Can drop INSTANCE when using @JvmStatic annotation
        System.out.println("isAuto: " + Car.isAuto());
        System.out.println("const: " + Car.constant);

        //car.printMe(null); //NullPointerException when function parameter specified as non-null and called with null as argument.

        //StaticCar.doIO(); //IOException because throwing checked exception
        try {
            StaticCar.doIO();
        }
        catch (IOException e) { //Exception 'java.io.IOException' is never thrown in the corresponding try block
            //Have to use @Throws annotation on Kotlin function
            System.out.println("IOException!");
        }

        StaticCar.defaultArgs("The number is: "); //Java only sees function with full parameters


    }
}
